// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <co/zenturi/mandolin/xnative/IJavascriptPromise.h>

#include <mandolin_helpers.h>

namespace mandolin_generated {

class NativeJavascriptPromise final : ::mandolin::JniInterface<::JavascriptPromise, NativeJavascriptPromise> {
public:
	using CppType = std::shared_ptr<::JavascriptPromise>;
	using CppOptType = std::shared_ptr<::JavascriptPromise>;
	using JniType = jobject;
	using Boxed = NativeJavascriptPromise;

	~NativeJavascriptPromise(){};

	static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::mandolin::JniClass<NativeJavascriptPromise>::get()._fromJava(jniEnv, j); }
	static ::mandolin::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::mandolin::JniClass<NativeJavascriptPromise>::get()._toJava(jniEnv, c)}; }
	static ::mandolin::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
	NativeJavascriptPromise(){};
	friend ::mandolin::JniClass<NativeJavascriptPromise>;
	friend ::mandolin::JniInterface<::JavascriptPromise, NativeJavascriptPromise>;

	class JavaProxy final : ::mandolin::JavaProxyHandle<JavaProxy>, public ::JavascriptPromise {
		public:
			JavaProxy(JniType j);
			~JavaProxy();
			void resolveMap(const std::shared_ptr<::JavascriptMap> & map) override;
			void resolveArray(const std::shared_ptr<::JavascriptArray> & arr) override;
			void resolveObject(const std::shared_ptr<::JavascriptObject> & obj) override;
			void resolveDouble(double v) override;
			void resolveInt(int32_t v) override;
			void resolveString(const std::string & v) override;
			void resolveNull() override;
			void resolveBoolean(bool v) override;
			void reject(const std::string & code, const std::string & message) override;
		private:
			friend ::mandolin::JniInterface<::JavascriptPromise, ::mandolin_generated::NativeJavascriptPromise>;
	};

	const ::mandolin::GlobalRef<jclass> clazz { ::mandolin::jniFindClass("co/zenturi/mandolin/xnative/react/JavascriptPromise") };
	const jmethodID method_resolveMap { ::mandolin::jniGetMethodID(clazz.get(), "resolveMap", "()V") };
	const jmethodID method_resolveArray { ::mandolin::jniGetMethodID(clazz.get(), "resolveArray", "()V") };
	const jmethodID method_resolveObject { ::mandolin::jniGetMethodID(clazz.get(), "resolveObject", "()V") };
	const jmethodID method_resolveDouble { ::mandolin::jniGetMethodID(clazz.get(), "resolveDouble", "(D)V") };
	const jmethodID method_resolveInt { ::mandolin::jniGetMethodID(clazz.get(), "resolveInt", "(I)V") };
	const jmethodID method_resolveString { ::mandolin::jniGetMethodID(clazz.get(), "resolveString", "(Ljava/lang/String;)V") };
	const jmethodID method_resolveNull { ::mandolin::jniGetMethodID(clazz.get(), "resolveNull", "()V") };
	const jmethodID method_resolveBoolean { ::mandolin::jniGetMethodID(clazz.get(), "resolveBoolean", "(Z)V") };
	const jmethodID method_reject { ::mandolin::jniGetMethodID(clazz.get(), "reject", "(Ljava/lang/String; Ljava/lang/String;)V") };
};

} // namespace mandolin_generated 
