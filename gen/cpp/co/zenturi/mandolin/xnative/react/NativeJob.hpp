// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <co/zenturi/mandolin/xnative/react/IJob.h>

#include <mandolin_helpers.h>

namespace mandolin_generated {

class NativeJob final : ::mandolin::JniInterface<::Job, NativeJob> {
public:
	using CppType = std::shared_ptr<::Job>;
	using CppOptType = std::shared_ptr<::Job>;
	using JniType = jobject;
	using Boxed = NativeJob;

	~NativeJob(){};

	static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::mandolin::JniClass<NativeJob>::get()._fromJava(jniEnv, j); }
	static ::mandolin::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::mandolin::JniClass<NativeJob>::get()._toJava(jniEnv, c)}; }
	static ::mandolin::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
	NativeJob(){};
	friend ::mandolin::JniClass<NativeJob>;
	friend ::mandolin::JniInterface<::Job, NativeJob>;

	class JavaProxy final : ::mandolin::JavaProxyHandle<JavaProxy>, public ::Job {
		public:
			JavaProxy(JniType j);
			~JavaProxy();
			void run() override;
		private:
			friend ::mandolin::JniInterface<::Job, ::mandolin_generated::NativeJob>;
	};

	const ::mandolin::GlobalRef<jclass> clazz { ::mandolin::jniFindClass("co/zenturi/mandolin/xnative/react/Job") };
	const jmethodID method_run { ::mandolin::jniGetMethodID(clazz.get(), "run", "()V") };
};

} // namespace mandolin_generated 
