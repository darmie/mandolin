// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <co/zenturi/mandolin/xnative/IJavascriptMapKeyIterator.h>

#include <mandolin_helpers.h>

namespace mandolin_generated {

class NativeJavascriptMapKeyIterator final : ::mandolin::JniInterface<::JavascriptMapKeyIterator, NativeJavascriptMapKeyIterator> {
public:
	using CppType = std::shared_ptr<::JavascriptMapKeyIterator>;
	using CppOptType = std::shared_ptr<::JavascriptMapKeyIterator>;
	using JniType = jobject;
	using Boxed = NativeJavascriptMapKeyIterator;

	~NativeJavascriptMapKeyIterator(){};

	static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::mandolin::JniClass<NativeJavascriptMapKeyIterator>::get()._fromJava(jniEnv, j); }
	static ::mandolin::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::mandolin::JniClass<NativeJavascriptMapKeyIterator>::get()._toJava(jniEnv, c)}; }
	static ::mandolin::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
	NativeJavascriptMapKeyIterator(){};
	friend ::mandolin::JniClass<NativeJavascriptMapKeyIterator>;
	friend ::mandolin::JniInterface<::JavascriptMapKeyIterator, NativeJavascriptMapKeyIterator>;

	class JavaProxy final : ::mandolin::JavaProxyHandle<JavaProxy>, public ::JavascriptMapKeyIterator {
		public:
			JavaProxy(JniType j);
			~JavaProxy();
			bool hasNextKey() override;
			std::string nextKey() override;
		private:
			friend ::mandolin::JniInterface<::JavascriptMapKeyIterator, ::mandolin_generated::NativeJavascriptMapKeyIterator>;
	};

	const ::mandolin::GlobalRef<jclass> clazz { ::mandolin::jniFindClass("co/zenturi/mandolin/xnative/react/JavascriptMapKeyIterator") };
	const jmethodID method_hasNextKey { ::mandolin::jniGetMethodID(clazz.get(), "hasNextKey", "()Z") };
	const jmethodID method_nextKey { ::mandolin::jniGetMethodID(clazz.get(), "nextKey", "()Ljava/lang/String;") };
};

} // namespace mandolin_generated 
