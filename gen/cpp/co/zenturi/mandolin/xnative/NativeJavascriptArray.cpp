// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#include "NativeJavascriptArray.hpp"

namespace mandolin_generated {

NativeJavascriptArray::NativeJavascriptArray() : ::mandolin::JniInterface<::JavascriptArray, NativeJavascriptArray> {}

NativeJavascriptArray::~NativeJavascriptArray() = default;

NativeJavascriptArray::JavaProxy::JavaProxy(JniType j) : Handle(::mandolin::jniGetThreadEnv(), j) { }

NativeJavascriptArray::::JavaProxy::~JavaProxy() = default;

int32_t NativeJavascriptArray::JavaProxy::size() {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_size);
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::I32:toCpp(jniEnv, ret);
}
bool NativeJavascriptArray::JavaProxy::isNull(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_isNull, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::Bool:toCpp(jniEnv, ret);
}
bool NativeJavascriptArray::JavaProxy::getBoolean(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getBoolean, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::Bool:toCpp(jniEnv, ret);
}
double NativeJavascriptArray::JavaProxy::getDouble(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getDouble, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::F64:toCpp(jniEnv, ret);
}
int32_t NativeJavascriptArray::JavaProxy::getInt(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getInt, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::I32:toCpp(jniEnv, ret);
}
std::string NativeJavascriptArray::JavaProxy::getString(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getString, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::String:toCpp(jniEnv, ret);
}
std::shared_ptr<JavascriptArray> NativeJavascriptArray::JavaProxy::getArray(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getArray, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptArray:toCpp(jniEnv, ret);
}
std::shared_ptr<JavascriptMap> NativeJavascriptArray::JavaProxy::getMap(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getMap, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptMap:toCpp(jniEnv, ret);
}
std::shared_ptr<::JavascriptObject> NativeJavascriptArray::JavaProxy::getObject(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getObject, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptObject:toCpp(jniEnv, ret);
}
::JavascriptType NativeJavascriptArray::JavaProxy::getType(int32_t index) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getType, ::mandolin::I32::fromCpp(jniEnv, index));
	::mandolin::jniExceptionCheck(jniEnv);
	return null;
}
void NativeJavascriptArray::JavaProxy::pushNull() {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushNull);
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushBoolean(bool value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushBoolean, ::mandolin::Bool::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushDouble(double value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushDouble, ::mandolin::F64::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushInt(int32_t value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushInt, ::mandolin::I32::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushString(const std::string & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushString, ::mandolin::String::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushArray(const std::shared_ptr<JavascriptArray> & array) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushArray, ::mandolin_generated::NativeJavascriptArray:fromCpp(jniEnv, array));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushMap(const std::shared_ptr<JavascriptMap> & map) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushMap, ::mandolin_generated::NativeJavascriptMap:fromCpp(jniEnv, map));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::pushObject(const std::shared_ptr<JavascriptObject> & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_pushObject, ::mandolin_generated::NativeJavascriptObject:fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptArray::JavaProxy::append(const std::shared_ptr<JavascriptArray> & source) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptArray>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_append, ::mandolin_generated::NativeJavascriptArray:fromCpp(jniEnv, source));
	::mandolin::jniExceptionCheck(jniEnv);
}
}
