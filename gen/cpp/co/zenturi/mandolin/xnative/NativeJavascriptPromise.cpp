// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#include "NativeJavascriptPromise.hpp"

namespace mandolin_generated {

NativeJavascriptPromise::NativeJavascriptPromise() : ::mandolin::JniInterface<::JavascriptPromise, NativeJavascriptPromise> {}

NativeJavascriptPromise::~NativeJavascriptPromise() = default;

NativeJavascriptPromise::JavaProxy::JavaProxy(JniType j) : Handle(::mandolin::jniGetThreadEnv(), j) { }

NativeJavascriptPromise::::JavaProxy::~JavaProxy() = default;

void NativeJavascriptPromise::JavaProxy::resolveMap(const std::shared_ptr<JavascriptMap> & map) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveMap, ::mandolin_generated::NativeJavascriptMap:fromCpp(jniEnv, map));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveArray(const std::shared_ptr<JavascriptArray> & arr) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveArray, ::mandolin_generated::NativeJavascriptArray:fromCpp(jniEnv, arr));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveObject(const std::shared_ptr<JavascriptObject> & obj) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveObject, ::mandolin_generated::NativeJavascriptObject:fromCpp(jniEnv, obj));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveDouble(double v) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveDouble, ::mandolin::F64::fromCpp(jniEnv, v));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveInt(int32_t v) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveInt, ::mandolin::I32::fromCpp(jniEnv, v));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveString(const std::string & v) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveString, ::mandolin::String::fromCpp(jniEnv, v));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveNull() {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveNull);
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::resolveBoolean(bool v) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_resolveBoolean, ::mandolin::Bool::fromCpp(jniEnv, v));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptPromise::JavaProxy::reject(const std::string & code, const std::string & message) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptPromise>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_reject, ::mandolin::String::fromCpp(jniEnv, code), , ::mandolin::String::fromCpp(jniEnv, message));
	::mandolin::jniExceptionCheck(jniEnv);
}
}
