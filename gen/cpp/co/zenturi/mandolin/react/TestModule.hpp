// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <co/zenturi/mandolin/TestModule.h>
#include <co/zenturi/mandolin/xnative/ReactBridge.h>

#include <co/zenturi/mandolin/xnative/JavascriptPromise.h>
#include <co/zenturi/mandolin/xnative/JavascriptCallback.h>
#include <co/zenturi/mandolin/xnative/JavascriptArray.h>
#include <co/zenturi/mandolin/xnative/JavascriptMap.h>


namespace mandolin_generated {

class TestModule  {
public:
	hx::ObjectPtr< co::zenturi::mandolin::TestModule_obj > ref;
	TestModule(const std::shared_ptr< ::ReactBridge > & bridge){};
	~TestModule(){};
	static std::shared_ptr<TestModule> create(const std::shared_ptr< ::ReactBridge > & bridge) {
		return std::make_shared<TestModule>(bridge);
	}
	void new(const int32_t x) {
		this->ref = co::zenturi::mandolin::TestModule_obj::__new(x);
	}
	void doSomething() {
		ref->doSomething();
	}
	void getValue(const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->getValue();
		promise->resolveString(ret);
	}
	void setValue(const string value, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->setValue(value);
		promise->resolveString(ret);
	}
	void setUpdate(const std::shared_ptr<::JavascriptCallback> & callback) {
		ref->setUpdate(callback);
	}
	void add(const int32_t x, const int64_t y, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->add(x, y);
		promise->resolveInt(ret);
	}
	void testArray(const std::shared_ptr<::JavascriptArray> & arr, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->testArray(arr);
		promise->resolveArray(::JavascriptObject::fromHaxe(ret));
	}
	void testMap(const std::shared_ptr<::JavascriptMap> & map, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->testMap(map);
		promise->resolveMap(::JavascriptObject::fromHaxe(ret));
	}
}; // class TestModule

} // namespace mandolin_generated 
