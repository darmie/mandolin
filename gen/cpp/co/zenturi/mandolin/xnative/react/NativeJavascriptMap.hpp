// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <co/zenturi/mandolin/xnative/react/IJavascriptMap.h>

#include <mandolin_helpers.h>

namespace mandolin_generated {

class NativeJavascriptMap final : ::mandolin::JniInterface<::JavascriptMap, NativeJavascriptMap> {
public:
	using CppType = std::shared_ptr<::JavascriptMap>;
	using CppOptType = std::shared_ptr<::JavascriptMap>;
	using JniType = jobject;
	using Boxed = NativeJavascriptMap;

	~NativeJavascriptMap(){};

	static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::mandolin::JniClass<NativeJavascriptMap>::get()._fromJava(jniEnv, j); }
	static ::mandolin::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::mandolin::JniClass<NativeJavascriptMap>::get()._toJava(jniEnv, c)}; }
	static ::mandolin::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
	NativeJavascriptMap(){};
	friend ::mandolin::JniClass<NativeJavascriptMap>;
	friend ::mandolin::JniInterface<::JavascriptMap, NativeJavascriptMap>;

	class JavaProxy final : ::mandolin::JavaProxyHandle<JavaProxy>, public ::JavascriptMap {
		public:
			JavaProxy(JniType j);
			~JavaProxy();
			bool hasKey(const std::string & name) override;
			bool isNull(const std::string & name) override;
			bool getBoolean(const std::string & name) override;
			double getDouble(const std::string & name) override;
			int32_t getInt(const std::string & name) override;
			std::string getString(const std::string & name) override;
			std::shared_ptr<::JavascriptArray> getArray(const std::string & name) override;
			std::shared_ptr<::JavascriptMap> getMap(const std::string & name) override;
			std::shared_ptr<::JavascriptObject> getObject(const std::string & name) override;
			::JavascriptType getType(const std::string & name) override;
			std::shared_ptr<::JavascriptMapKeyIterator> keySetIterator() override;
			void putNull(const std::string & key) override;
			void putBoolean(const std::string & key, bool value) override;
			void putDouble(const std::string & key, double value) override;
			void putInt(const std::string & key, int32_t value) override;
			void putString(const std::string & key, const std::string & value) override;
			void putArray(const std::string & key, const std::shared_ptr<::JavascriptArray> & value) override;
			void putMap(const std::string & key, const std::shared_ptr<::JavascriptMap> & value) override;
			void putObject(const std::string & key, const std::shared_ptr<::JavascriptObject> & value) override;
			void merge(const std::shared_ptr<::JavascriptMap> & source) override;
		private:
			friend ::mandolin::JniInterface<::JavascriptMap, ::mandolin_generated::NativeJavascriptMap>;
	};

	const ::mandolin::GlobalRef<jclass> clazz { ::mandolin::jniFindClass("co/zenturi/mandolin/xnative/react/JavascriptMap") };
	const jmethodID method_hasKey { ::mandolin::jniGetMethodID(clazz.get(), "hasKey", "(Ljava/lang/String;)Z") };
	const jmethodID method_isNull { ::mandolin::jniGetMethodID(clazz.get(), "isNull", "(Ljava/lang/String;)Z") };
	const jmethodID method_getBoolean { ::mandolin::jniGetMethodID(clazz.get(), "getBoolean", "(Ljava/lang/String;)Z") };
	const jmethodID method_getDouble { ::mandolin::jniGetMethodID(clazz.get(), "getDouble", "(Ljava/lang/String;)D") };
	const jmethodID method_getInt { ::mandolin::jniGetMethodID(clazz.get(), "getInt", "(Ljava/lang/String;)I") };
	const jmethodID method_getString { ::mandolin::jniGetMethodID(clazz.get(), "getString", "(Ljava/lang/String;)Ljava/lang/String;") };
	const jmethodID method_getArray { ::mandolin::jniGetMethodID(clazz.get(), "getArray", "(Ljava/lang/String;)") };
	const jmethodID method_getMap { ::mandolin::jniGetMethodID(clazz.get(), "getMap", "(Ljava/lang/String;)") };
	const jmethodID method_getObject { ::mandolin::jniGetMethodID(clazz.get(), "getObject", "(Ljava/lang/String;)") };
	const jmethodID method_getType { ::mandolin::jniGetMethodID(clazz.get(), "getType", "(Ljava/lang/String;)") };
	const jmethodID method_keySetIterator { ::mandolin::jniGetMethodID(clazz.get(), "keySetIterator", "()") };
	const jmethodID method_putNull { ::mandolin::jniGetMethodID(clazz.get(), "putNull", "(Ljava/lang/String;)V") };
	const jmethodID method_putBoolean { ::mandolin::jniGetMethodID(clazz.get(), "putBoolean", "(Ljava/lang/String; Z)V") };
	const jmethodID method_putDouble { ::mandolin::jniGetMethodID(clazz.get(), "putDouble", "(Ljava/lang/String; D)V") };
	const jmethodID method_putInt { ::mandolin::jniGetMethodID(clazz.get(), "putInt", "(Ljava/lang/String; I)V") };
	const jmethodID method_putString { ::mandolin::jniGetMethodID(clazz.get(), "putString", "(Ljava/lang/String; Ljava/lang/String;)V") };
	const jmethodID method_putArray { ::mandolin::jniGetMethodID(clazz.get(), "putArray", "(Ljava/lang/String; )V") };
	const jmethodID method_putMap { ::mandolin::jniGetMethodID(clazz.get(), "putMap", "(Ljava/lang/String; )V") };
	const jmethodID method_putObject { ::mandolin::jniGetMethodID(clazz.get(), "putObject", "(Ljava/lang/String; )V") };
	const jmethodID method_merge { ::mandolin::jniGetMethodID(clazz.get(), "merge", "()V") };
};

} // namespace mandolin_generated 
