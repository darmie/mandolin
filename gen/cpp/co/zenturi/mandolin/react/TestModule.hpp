// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <co/zenturi/mandolin/TestModule.h>
#include <JavascriptObjectImpl.hpp>
#include <co/zenturi/mandolin/xnative/IJavascriptPromise.h>
#include <co/zenturi/mandolin/xnative/IJavascriptCallback.h>
#include <co/zenturi/mandolin/xnative/IJavascriptArray.h>
#include <co/zenturi/mandolin/xnative/IJavascriptMap.h>


class ReactBridge;
class JobQueueImpl;
class JobDispatcher;
class JavascriptPromise;
class JavascriptCallback;
class JavascriptArray;
class JavascriptMap;


class TestModule  {
public:
	hx::ObjectPtr< co::zenturi::mandolin::TestModule > ref;
	TestModule(const std::shared_ptr< ::ReactBridge > & bridge){};
	~TestModule(){};
	static std::shared_ptr<TestModule> create(const std::shared_ptr< ::ReactBridge > & bridge) {
		return std::make_shared<TestModule>(bridge);
	}
	void __new(const int32_t x) {
	}
	void doSomething() {
		ref->doSomething();
	}
	void getValue(const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->get_value();
		promise->resolveString(::JavascriptObject::fromHaxe(ret)->asString());
	}
	void setValue(const std::string value, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->set_value(value.c_str());
		promise->resolveString(::JavascriptObject::fromHaxe(ret)->asString());
	}
	void setUpdate(const std::shared_ptr<::JavascriptCallback> & callback) {
		ref->set_update(callback);
	}
	void add(const int32_t x, const int64_t y, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->add(x, y);
		promise->resolveInt(::JavascriptObject::fromHaxe(ret)->asInt());
	}
	void testArray(const std::shared_ptr<::JavascriptArray> & arr, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->testArray(arr);
		promise->resolveArray(ret);
	}
	void testMap(const std::shared_ptr<::JavascriptMap> & map, const std::shared_ptr<::JavascriptPromise> &promise) {
		auto ret = ref->testMap(map);
		promise->resolveMap(ret);
	}
private:
	std::shared_ptr<ReactBridge> mBridge;	std::shared_ptr<JobQueueImpl> mQueue;	std::shared_ptr<JobDispatcher> mDispatcher;}; // class TestModule

