// AUTOGENERATED FILE - DO NOT MODIFY!
// This file is generated by Mandolin - (c) Zenturi.co

#include "NativeJavascriptMap.hpp"

namespace mandolin_generated {

NativeJavascriptMap::NativeJavascriptMap() : ::mandolin::JniInterface<::JavascriptMap, NativeJavascriptMap> {}

NativeJavascriptMap::~NativeJavascriptMap() = default;

NativeJavascriptMap::JavaProxy::JavaProxy(JniType j) : Handle(::mandolin::jniGetThreadEnv(), j) { }

NativeJavascriptMap::::JavaProxy::~JavaProxy() = default;

bool NativeJavascriptMap::JavaProxy::hasKey(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_hasKey, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::Bool:toCpp(jniEnv, ret);
}
bool NativeJavascriptMap::JavaProxy::isNull(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_isNull, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::Bool:toCpp(jniEnv, ret);
}
bool NativeJavascriptMap::JavaProxy::getBoolean(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getBoolean, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::Bool:toCpp(jniEnv, ret);
}
double NativeJavascriptMap::JavaProxy::getDouble(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getDouble, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::F64:toCpp(jniEnv, ret);
}
int32_t NativeJavascriptMap::JavaProxy::getInt(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getInt, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::I32:toCpp(jniEnv, ret);
}
std::string NativeJavascriptMap::JavaProxy::getString(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getString, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin::String:toCpp(jniEnv, ret);
}
std::shared_ptr<JavascriptArray> NativeJavascriptMap::JavaProxy::getArray(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getArray, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptArray:toCpp(jniEnv, ret);
}
std::shared_ptr<JavascriptMap> NativeJavascriptMap::JavaProxy::getMap(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getMap, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptMap:toCpp(jniEnv, ret);
}
std::shared_ptr<::JavascriptObject> NativeJavascriptMap::JavaProxy::getObject(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getObject, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return ::mandolin_generated::NativeJavascriptObject:toCpp(jniEnv, ret);
}
::JavascriptType NativeJavascriptMap::JavaProxy::getType(const std::string & name) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getType, ::mandolin::String::fromCpp(jniEnv, name));
	::mandolin::jniExceptionCheck(jniEnv);
	return null;
}
 NativeJavascriptMap::JavaProxy::keySetIterator() {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	auto ret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_keySetIterator);
	::mandolin::jniExceptionCheck(jniEnv);
	return null;
}
void NativeJavascriptMap::JavaProxy::putNull(const std::string & key) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putNull, ::mandolin::String::fromCpp(jniEnv, key));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putBoolean(const std::string & key, bool value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putBoolean, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin::Bool::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putDouble(const std::string & key, double value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putDouble, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin::F64::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putInt(const std::string & key, int32_t value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putInt, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin::I32::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putString(const std::string & key, const std::string & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putString, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin::String::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putArray(const std::string & key, const std::shared_ptr<JavascriptArray> & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putArray, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin_generated::NativeJavascriptArray::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putMap(const std::string & key, const std::shared_ptr<JavascriptMap> & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putMap, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin_generated::NativeJavascriptMap::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::putObject(const std::string & key, const std::shared_ptr<::JavascriptObject> & value) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_putObject, ::mandolin::String::fromCpp(jniEnv, key), , ::mandolin_generated::NativeJavascriptObject::fromCpp(jniEnv, value));
	::mandolin::jniExceptionCheck(jniEnv);
}
void NativeJavascriptMap::JavaProxy::merge(const std::shared_ptr<JavascriptMap> & source) {
	auto jniEnv = ::mandolin::jniGetThreadEnv();
	::mandolin::JniLocalScope jscope(jniEnv, 10);
	const auto& data = ::mandolin::JniClass<::mandolin_generated::NativeJavascriptMap>::get();
	jniEnv->CallVoidMethod(Handle::get().get(), data.method_merge, ::mandolin_generated::NativeJavascriptMap::fromCpp(jniEnv, source));
	::mandolin::jniExceptionCheck(jniEnv);
}
}
